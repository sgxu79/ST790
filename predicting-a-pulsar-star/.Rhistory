diff_E = proposed_E - current_E
}
return(epsilon_rest)
}
find_start_ep = function(param){
q = param
epsilon = epsilon_ = 0.1
a_min = 0.25
a_cross = 0.5
a_max = 0.75
d = 2
p = rnorm(length(q), 0, 1)
current_E = loglik(q)-sum(p^2)/2
p = p + epsilon * loglik_grad(q) / 2
q = q + epsilon * p
p = p + epsilon * loglik_grad(q) / 2
proposed_E = loglik(q)-sum(p^2)/2
diff_E = proposed_E - current_E
direction = 2*(diff_E > log(a_cross)) - 1
while(direction*diff_E > direction*log(a_cross)){
epsilon = epsilon_
epsilon_ = d^direction*epsilon
current_E = loglik(q)-sum(p^2)/2
p = p + epsilon_ * loglik_grad(q) / 2
q = q + epsilon_ * p
p = p + epsilon_ * loglik_grad(q) / 2
proposed_E = loglik(q)-sum(p^2)/2
diff_E = proposed_E - current_E
}
ep = sort(c(epsilon,epsilon_))
epsilon = ep[1]
epsilon_ = ep[2]
while((diff_E > log(a_max)) || (diff_E < log(a_min))){
epsilon_m = (epsilon+epsilon_)/2
current_E = loglik(q)-sum(p^2)/2
p = p + epsilon_m * loglik_grad(q) / 2
q = q + epsilon_m * p
p = p + epsilon_m * loglik_grad(q) / 2
proposed_E = loglik(q)-sum(p^2)/2
diff_E = proposed_E - current_E
if(diff_E > log(a_max)){
epsilon = epsilon_m
}else if(diff_E < log(a_min)){
epsilon_ = epsilon_m
}else{
epsilon = epsilon_m
break
}
}
return(epsilon)
}
nn_hmc = function(n_iter,n_adapt,inits,L,delta){
print_step = n_iter/10
plot_step = n_iter/1000
samps = matrix(0, nrow=n_iter,ncol=length(inits))
log_ep = numeric(n_iter)
log_ep_ = numeric(n_adapt)
samps[1,] = inits
log_ep[1] = log(find_start_ep(inits))
log_ep_[1] = log(0.1)
mu = log(10*exp(log_ep[1]))
H = 0
gamma = 0.05
t = 10
kappa = 0.75
tic()
#  jpeg("C:/Users/15306/Desktop/Research/Plots/foo%02d.jpg")
for(it in 2: n_iter){
current_q = samps[it-1,]
epsilon = exp(log_ep[it-1])
q = current_q
p = rnorm(length(q), 0, 1) # independent standard normal variates
current_p = p
for (l in 1:L) {
# Make a half step for momentum at the beginning
p = p + epsilon * loglik_grad(q)/2
# Make a full step for the position
q = q + epsilon * p
# Make a half step for momentum at the end.
p = p + epsilon * loglik_grad(q)/2
}
# Negate momentum at end of trajectory to make the proposal symmetric
p = -p
# Evaluate potential and kinetic energies at start and end of trajectory
current_E = loglik(current_q) - sum(current_p^2)/2
proposed_E = loglik(q) - sum(p^2)/2
# Accept or reject the state at end of trajectory, returning either
# the position at the end of the trajectory or the initial position
diff_K = proposed_E - current_E
alpha = exp(min(0,diff_K))
if (log(runif(1)) < diff_K) {
current_q = q # accept
}
samps[it, ]  = current_q
if(it <= n_adapt){
H = (1-1/(it+t))*H+1/(it+t)*(delta-alpha)
log_ep[it] = mu-sqrt(it)/gamma*H
log_ep_[it] = it^(-kappa)*log_ep[it]+(1-it^(-kappa))*log_ep_[it-1]
}else{
log_ep[it] = log_ep_[n_adapt]
}
if(mod(it,plot_step)==0){
plot(X,y)
qt_lines(true_param,c(2,2,2))
qt_lines(samps[it,])
}
if(mod(it,print_step)==0){
cat(it,"iterations completed.","\n")
}
}
#  dev.off()
toc()
return(list(samps = samps,step_size = log_ep))
}
result = nn_hmc(n_iter = 5000,n_adapt = 1000, inits = true_param+rnorm(length(true_param),0.3),L=10,delta=0.7)
qt_sigma = 0.5
result = nn_hmc(n_iter = 5000,n_adapt = 1000, inits = true_param+rnorm(length(true_param),0.3),L=10,delta=0.7)
qt_sigma = 1
result = nn_hmc(n_iter = 5000,n_adapt = 1000, inits = true_param+rnorm(length(true_param),0.3),L=10,delta=0.7)
1031.4/60
plot(result$step_size)
plot(result$step_size,type="l")
plot(exp(result$step_size))
plot(exp(result$step_size),type="l")
plot(samp[,1],type="l")
plot(result$samps[,1],type="l")
plot(result$samps[,2],type="l")
plot(result$samps[,3],type="l")
plot(result$samps[,4],type="l")
plot(result$samps[,5],type="l")
plot(result$samps[,6],type="l")
plot(result$samps[,7],type="l")
plot(result$samps[,8],type="l")
plot(result$samps[,50],type="l")
plot(result$samps[,60],type="l")
plot(result$samps[,80],type="l")
plot(result$samps[,100],type="l")
plot(result$samps[,200],type="l")
plot(result$samps[,400],type="l")
hist(result$samps[,400])
mean(result$samps[,400])
median(result$samps[,400])
median(result$samps[,1])
true_param[1]
true_param[2]
true_param[3]
est_param = apply(result$samps[-c(1:1000),],2,median)
plot(X,y)
qt_lines(true_param,c(2,2,2))
qt_lines(est_param)
est_param = result$samps[5000,]
plot(X,y)
qt_lines(true_param,c(2,2,2))
qt_lines(est_param)
est_param = result$samps[1,]
plot(X,y)
qt_lines(true_param,c(2,2,2))
qt_lines(est_param)
est_param = result$samps[2,]
plot(X,y)
qt_lines(true_param,c(2,2,2))
qt_lines(est_param)
est_param = result$samps[4000,]
plot(X,y)
qt_lines(true_param,c(2,2,2))
qt_lines(est_param)
cor(result$samps[,1],result$samps[,2])
cor(result$samps[,1],result$samps[,3])
cor(result$samps[,1],result$samps[,4])
cor(result$samps[,1],result$samps[,5])
cor(result$samps[,1],result$samps[,6])
cor(result$samps[,1],result$samps[,7])
cor(result$samps[,1],result$samps[,8])
cor(result$samps[,1],result$samps[,9])
cor(result$samps[,1],result$samps[,100])
cor(result$samps[,1],result$samps[,20])
gamma_ = result$samps[-c(1:1000),1:J]
theta_ = result$samps[-c(1:1000),(J+1):(2*J)]
alpha_ = result$samps[-c(1:1000),(2*J+1):(2*J+J*K)]
beta_ = result$samps[-c(1:1000),(2*J+J*K+1):(2*J+J*K+K)]
b_ = result$samps[-c(1:1000),2*J+J*K+K+1]
est_qt = numeric(4000)
i=1
neural_net(0.5,0.9,gamma_[i,],theta[i,],matrix(alpha[i,],nrow+j,ncol=K),beta,b)
neural_net(0.5,0.9,gamma_[i,],theta_[i,],matrix(alpha_[i,],nrow+j,ncol=K),beta_,b_)
neural_net(0.5,0.9,gamma_[i,],theta_[i,],matrix(alpha_[i,],nrow=J,ncol=K),beta_,b_)
cbdin(1,0.5)
cbind(1,0.5)
dim(rbind(gamma_[1,],theta[1,]))
dim(rbind(gamma_[1,],theta_[1,]))
c(1,0.5)%*%dim(rbind(gamma_[1,],theta_[1,]))
test = c(1,0.5)%*%dim(rbind(gamma_[1,],theta_[1,]))
cbind(1,test)
hidden_one = relu(forward(0.5,gamma_[1,],theta_[1,]))
dim(gamma_)
hidden_two = softplus(forward(hidden_one,matrix(alpha_[1,],nrow=J,ncol=K),beta_[1,]))
neural_net(0.5,0.9,gamma_[i,],theta_[i,],matrix(alpha_[i,],nrow=J,ncol=K),beta_,b_)
matrix(alpha_[i,],nrow=J,ncol=K)
i=1
neural_net(0.5,0.9,gamma_[i,],theta_[i,],matrix(alpha_[i,],nrow=J,ncol=K),beta_[i,],b_[i,])
length(b_)
neural_net(0.5,0.9,gamma_[i,],theta_[i,],matrix(alpha_[i,],nrow=J,ncol=K),beta_[i,],b_[i])
gamma_ = result$samps[-c(1:1000),1:J]
theta_ = result$samps[-c(1:1000),(J+1):(2*J)]
alpha_ = result$samps[-c(1:1000),(2*J+1):(2*J+J*K)]
beta_ = result$samps[-c(1:1000),(2*J+J*K+1):(2*J+J*K+K)]
b_ = result$samps[-c(1:1000),2*J+J*K+K+1]
est_qt = numeric(4000)
for(i in 1:4000){
est_qt[i] = neural_net(0.5,0.9,gamma_[i,],theta_[i,],matrix(alpha_[i,],nrow=J,ncol=K),beta_[i,],b_[i])
}
plot(est_qt,type="l")
hist(est_qt)
grid_x = seq(-1,1,0.01)
grid_x = seq(-1,1,length.out = 100)
est_qt = matrix(0,nrow=4000,ncol=100)
grid_x = seq(-1,1,length.out = 100)
for(i in 1:4000){
for(j in 1:100){
est_qt[i,j] = neural_net(grid_x[j],0.9,gamma_[i,],theta_[i,],matrix(alpha_[i,],nrow=J,ncol=K),beta_[i,],b_[i])
}
}
plot(grid_X,colMeans(est_qt))
plot(grid_x,colMeans(est_qt))
plot(grid_x,colMeans(est_qt),type="l")
plot(X,y)
qt_lines(true_param,c(2,2,2))
lines(grid_x,colMeans(est_qt),type="l")
plot(grid_x,colMeans(est_qt),type="l")
lines(grid_x,apply(est_qt,2,quantile,probs=0.975))
plot(grid_x,colMeans(est_qt),type="l")
plot(grid_x,colMeans(est_qt),type="l")
lines(grid_x,apply(est_qt,2,quantile,probs=0.975),col=2,lty=2)
lines(grid_x,apply(est_qt,2,quantile,probs=0.025),col=2,lty=2)
library(haven)
library(tidyr)
library(tibble)
library(survival)
library(tictoc)
library(mice)
library(boot)
library(ggplot2)
library(gridExtra)
library(Cairo)
library(coxed)
source("C:/Users/15306/Desktop/UNC/DR014/DR014/code/rqspline.R")
setwd("C:/Users/15306/Desktop/UNC/DR014/DR014/data")
gen <- data.frame(read_sas("gen.sas7bdat"))
group = gen$study
group[which(group=="")] = "CNICS"
study = gen$study
num_study= factor(study,c("A5095","A5142","A5175","A5202"),labels=1:4)
#Reconstruct the dataset to include only variables of interest
gen_s <- data.frame(age = as.numeric(gen$AGE),cd4 = as.numeric(gen$bcd4),lrna = as.numeric(gen$lrna),
sex = factor(gen$SEX,1:2,labels = c("Male","Female")),
race = factor(gen$raceth2,c(1:3,9),c("White","Black","Hispanic","Other")),
idu = factor(gen$ivdrugb,0:1,c("No","Yes")), aids = factor(gen$hxaids,0:1,c("No","Yes")),
hep = factor(gen$hep,0:1,c("Negative/Missing/Indeterminate","Positive")),
dep = factor(gen$hxdeprx,0:1,c("No","Yes")),rand_efv = factor(gen$rand_efv,0:1,c("EFV-free","EFV-containing")),
s = factor(gen$S,0:1,c("No","Selected")),study = factor(gen$study,c("A5095","A5142","A5175","A5202")), z = gen$Zobs,
isuicyrd = as.numeric(gen$isuicyr_d),ln_suicyrd = gen$ln_suicyrd,isuicwk_d=as.numeric(gen$isuicwk_d),isuic_d=as.numeric(gen$isuic_d),
datsuic = as.numeric(gen$datsuic),datsuicw = as.numeric(gen$datsuicw), datsuicy=as.numeric(gen$datsuicy),
ln_datsuicy = gen$ln_datsuicy,efv_indicator = factor(gen$efv_indicator,0:1,c("EFV-free","EFV-containing")))
gen_s$ln_datsuicy[gen_s$datsuicy == 0 ] = 0
gen_s$ln_suicyrd[gen_s$isuicyrd == 0 ] = 0
#Unweighted analysis using RCTs
RCT.df = subset(gen_s,s=="Selected")
num_study[1]
num_study[2]
num_study[1]=="A5095"
num_study[1]=="A5142"
num_study[1]==2
levels(num_study)
gen_s$study
gen_s$study[1]
study
study[1]
m = {}
n = {}
x = {}
y = {}
for(i in 1:4){
x[i] = sum(subset(RCT.df,study == study[i] && rand_efv=="EFV-free")$isuic_d)
y[i] = sum(subset(RCT.df,study == study[i] && rand_efv=="EFV-containing")$isuic_d)
m[i] = nrow(subset(RCT.df,study == study[i] && rand_efv=="EFV-free"))
n[i] = nrow(subset(RCT.df,study == study[i] && rand_efv=="EFV-containing"))
}
x
y
m
n
study[4]
study[3]
study[2]
study[1]
levels(study)
level_study = c("A5095","A5142","A5175","A5202")
m = {}
n = {}
x = {}
y = {}
level_study = c("A5095","A5142","A5175","A5202")
for(i in 1:4){
x[i] = sum(subset(RCT.df,study == level_study[i] & rand_efv=="EFV-free")$isuic_d)
y[i] = sum(subset(RCT.df,study == level_study[i] & rand_efv=="EFV-containing")$isuic_d)
m[i] = nrow(subset(RCT.df,study == level_study[i] & rand_efv=="EFV-free"))
n[i] = nrow(subset(RCT.df,study == level_study[i] & rand_efv=="EFV-containing"))
}
x
y
sum(x)
sum(y)
m
n
N = m+n
delta = sum(x*m/N - y*n/N)/sum(n*m/N)
m = {}
n = {}
x = {}
y = {}
level_study = c("A5095","A5142","A5175","A5202")
for(i in 1:4){
x[i] = sum(subset(RCT.df,study == level_study[i] & rand_efv=="EFV-free")$isuic_d)
y[i] = sum(subset(RCT.df,study == level_study[i] & rand_efv=="EFV-containing")$isuic_d)
m[i] = nrow(subset(RCT.df,study == level_study[i] & rand_efv=="EFV-free")$isuicyrd)
n[i] = nrow(subset(RCT.df,study == level_study[i] & rand_efv=="EFV-containing")$isuicyrd)
}
x
y
m
n
m = {}
n = {}
x = {}
y = {}
level_study = c("A5095","A5142","A5175","A5202")
for(i in 1:4){
x[i] = sum(subset(RCT.df,study == level_study[i] & rand_efv=="EFV-free")$isuic_d)
y[i] = sum(subset(RCT.df,study == level_study[i] & rand_efv=="EFV-containing")$isuic_d)
m[i] = sum(subset(RCT.df,study == level_study[i] & rand_efv=="EFV-free")$isuicyrd)
n[i] = sum(subset(RCT.df,study == level_study[i] & rand_efv=="EFV-containing")$isuicyrd)
}
m
n
sum(m)
sum(n)
N = m+n
delta = sum(x*m/N - y*n/N)/sum(n*m/N)
delta
install.packages("gnm")
gnm(isuic_d~offset(ln_suicyrd)+rand_efv,family = poisson,eliminate = study,data =RCT.df)
library(gnm)
gnm(isuic_d~offset(ln_suicyrd)+rand_efv,family = poisson,eliminate = study,data =RCT.df)
summary(gnm(isuic_d~offset(ln_suicyrd)+rand_efv,family = poisson,eliminate = study,data =RCT.df))
summary(gnm(isuic_d~offset(ln_suicyrd)+rand_efv,family = poisson,data =RCT.df))
install.packages("plotly")
library(plotly)
library(plotly)
setwd("C:/Users/15306/Desktop/ST790/predicting-a-pulsar-star")
pulsar = read.csv(file="pulsar_syars.csv")
setwd("C:/Users/15306/Desktop/ST790/predicting-a-pulsar-star")
pulsar = read.csv(file="pulsar_syars.csv")
pulsar = read.csv(file="pulsar_stars.csv")
colnames(pulsar = c("mip","sdip","ekip","sip","msnr","sdsnr","eksnr","ssnr","label"))
colnames(pulsar) = c("mip","sdip","ekip","sip","msnr","sdsnr","eksnr","ssnr","label")
p = plot_ly(pulsar, x = ~mip, y = ~ekip, z = ~sip,
marker = list(color = ~label)) %>% add_markers() %>% layout(scene = list(xaxis = list(title="Mean"),
yaxis = list(title="Excess Kurtosis"),
zaxis = list(tltle="Skewness")))
p
p = plot_ly(pulsar, x = ~eksnr, y = ~ekip, z = ~sip,
marker = list(color = ~label)) %>% add_markers() %>% layout(scene = list(xaxis = list(title="Mean"),
yaxis = list(title="Excess Kurtosis"),
zaxis = list(tltle="Skewness")))
p
p = plot_ly(pulsar, x = ~eksnr, y = ~ekip, z = ~sip,
marker = list(color = ~label, size = 10)) %>% add_markers() %>% layout(scene = list(xaxis = list(title="Mean"),
yaxis = list(title="Excess Kurtosis"),
zaxis = list(tltle="Skewness")))
p
p = plot_ly(pulsar, x = ~eksnr, y = ~ekip, z = ~sip,
marker = list(color = ~label, size = 3)) %>% add_markers() %>% layout(scene = list(xaxis = list(title="Mean"),
yaxis = list(title="Excess Kurtosis"),
zaxis = list(tltle="Skewness")))
p
p = plot_ly(pulsar, x = ~eksnr, y = ~ekip, z = ~sip,
marker = list(color = ~label, size = 3)) %>% add_markers() %>% layout(scene = list(xaxis = list(title="Mean"),
yaxis = list(title="Excess Kurtosis"),
zaxis = list(tltle="Skewness")))
p
p = plot_ly(pulsar, x = ~eksnr, y = ~ekip, z = ~ssnr,
marker = list(color = ~label, size = 3)) %>% add_markers() %>% layout(scene = list(xaxis = list(title="Mean"),
yaxis = list(title="Excess Kurtosis"),
zaxis = list(tltle="Skewness")))
p
p = plot_ly(pulsar, x = ~eksnr, y = ~ekip, z = ~ssnr,
marker = list(color = ~label, size = 3)) %>% add_markers() %>% layout(scene = list(zaxis = list(tltle="Skewness"),xaxis = list(title="Mean"),
yaxis = list(title="Excess Kurtosis")
))
p
p = plot_ly(pulsar, x = ~eksnr, y = ~ekip, z = ~ssnr,
marker = list(color = ~label, size = 3)) %>% add_markers() %>% layout(scene = list(xaxis = list(title="Mean"),
yaxis = list(title="Excess Kurtosis"),
zaxis = list(tltle="")))
p0
p
p = plot_ly(pulsar, x = ~eksnr, y = ~ekip, z = ~ssnr,
marker = list(color = ~label, size = 3)) %>% add_markers() %>% layout(scene = list(xaxis = list(title="Mean"),
yaxis = list(title="Excess Kurtosis"),
yaxis = list(tltle="Skewness")))
p
p = plot_ly(pulsar, x = ~eksnr, y = ~ekip, z = ~ssnr,
marker = list(color = ~label, size = 3)) %>% layout(scene = list(xaxis = list(title="Mean"),
yaxis = list(title="Excess Kurtosis"),
zaxis = list(title="Skewness")))
p
p = plot_ly(pulsar, x = ~eksnr, y = ~ekip, z = ~ssnr,
marker = list(color = ~label, size = 3)) %>% layout(scene = list(xaxis = list(title="Mean"),
yaxis = list(title="Excess Kurtosis"),
zaxis = list(title="Skewness"))) %>% add_markers()
p
p = plot_ly(pulsar, x = ~eksnr, y = ~ekip, z = ~ssnr, type = "scatter3d"[,opacity = 0.5],
marker = list(color = ~label, size = 3)) %>% layout(scene = list(xaxis = list(title="Mean"),
yaxis = list(title="Excess Kurtosis"),
zaxis = list(title="Skewness"))) %>% add_markers()
p = plot_ly(pulsar, x = ~eksnr, y = ~ekip, z = ~ssnr, type = "scatter3d",opacity = 0.5,
marker = list(color = ~label, size = 3)) %>% layout(scene = list(xaxis = list(title="Mean"),
yaxis = list(title="Excess Kurtosis"),
zaxis = list(title="Skewness"))) %>% add_markers()
p
p = plot_ly(pulsar, x = ~eksnr, y = ~ekip, z = ~ssn,opacity = 0.5,
marker = list(color = ~label, size = 3)) %>% layout(scene = list(xaxis = list(title="Mean"),
yaxis = list(title="Excess Kurtosis"),
zaxis = list(title="Skewness"))) %>% add_markers()
p
p = plot_ly(pulsar, x = ~eksnr, y = ~ekip, z = ~ssn,
marker = list(color = ~label, size = 3)) %>% layout(scene = list(xaxis = list(title="Mean"),
yaxis = list(title="Excess Kurtosis"),
zaxis = list(title="Skewness"))) %>% add_markers()
p
p = plot_ly(pulsar, x = ~eksnr, y = ~ekip, z = ~ssnr, opacity = 0.5,
marker = list(color = ~label, size = 3)) %>% layout(scene = list(xaxis = list(title="Mean"),
yaxis = list(title="Excess Kurtosis"),
zaxis = list(title="Skewness"))) %>% add_markers()
p
p = plot_ly(pulsar, x = ~msnr, y = ~eksnr, z = ~ssnr, opacity = 0.5,
marker = list(color = ~label, size = 3)) %>% layout(scene = list(xaxis = list(title="Mean"),
yaxis = list(title="Excess Kurtosis"),
zaxis = list(title="Skewness"))) %>% add_markers()
p
p = plot_ly(pulsar, x = ~sdip, y = ~sdsnr, z = ~ssnr, opacity = 0.5,
marker = list(color = ~label, size = 3)) %>% layout(scene = list(xaxis = list(title="Mean"),
yaxis = list(title="Excess Kurtosis"),
zaxis = list(title="Skewness"))) %>% add_markers()
p
p = plot_ly(pulsar, x = ~sdip, y = ~sdsnr, z = ~ssnr, opacity = 0.5,
marker = list(color = ~label, size = 3, colors = traffic)) %>% layout(scene = list(xaxis = list(title="Mean"),
yaxis = list(title="Excess Kurtosis"),
zaxis = list(title="Skewness"))) %>% add_markers()
traffic = c("red","green")
p = plot_ly(pulsar, x = ~sdip, y = ~sdsnr, z = ~ssnr, opacity = 0.5,
marker = list(color = ~label, size = 3, colors = traffic)) %>% layout(scene = list(xaxis = list(title="Mean"),
yaxis = list(title="Excess Kurtosis"),
zaxis = list(title="Skewness"))) %>% add_markers()
p
p = plot_ly(pulsar, x = ~sdip, y = ~sdsnr, z = ~ssnr,
opacity = 0.5, color = ~label, size = 3, colors = traffic) %>% layout(scene = list(xaxis = list(title="Mean"),
yaxis = list(title="Excess Kurtosis"),
zaxis = list(title="Skewness")))
p
p = plot_ly(pulsar, x = ~sdip, y = ~sdsnr, z = ~ssnr, type = "scatter3d",
opacity = 0.5, color = ~label, size = 3, colors = traffic) %>% layout(scene = list(xaxis = list(title="Mean"),
yaxis = list(title="Excess Kurtosis"),
zaxis = list(title="Skewness")))
p
p = plot_ly(pulsar, x = ~sdip, y = ~sdsnr, z = ~ssnr, type = markers,
opacity = 0.5, color = ~label, size = 3, colors = traffic) %>% layout(scene = list(xaxis = list(title="Mean"),
yaxis = list(title="Excess Kurtosis"),
zaxis = list(title="Skewness")))
p = plot_ly(pulsar, x = ~sdip, y = ~sdsnr, z = ~ssnr, type = "markers",
opacity = 0.5, color = ~label, size = 3, colors = traffic) %>% layout(scene = list(xaxis = list(title="Mean"),
yaxis = list(title="Excess Kurtosis"),
zaxis = list(title="Skewness")))
p
p = plot_ly(pulsar, x = ~sdip, y = ~sdsnr, z = ~ssnr, type = "scatter3d",mode = "markers",
opacity = 0.5, color = ~label, size = 3, colors = traffic) %>% layout(scene = list(xaxis = list(title="Mean"),
yaxis = list(title="Excess Kurtosis"),
zaxis = list(title="Skewness")))
p
p = plot_ly(pulsar, x = ~sdip, y = ~sdsnr, z = ~ssnr, opacity = 0.5, colors = traffic,
marker = list(color = ~label, size = 3)) %>% layout(scene = list(xaxis = list(title="Mean"),
yaxis = list(title="Excess Kurtosis"),
zaxis = list(title="Skewness"))) %>% add_markers()
p
pulsar$label = factor(pulsar$label)
p = plot_ly(pulsar, x = ~sdip, y = ~sdsnr, z = ~ssnr, opacity = 0.5, colors = traffic,
marker = list(color = ~label, size = 3)) %>% layout(scene = list(xaxis = list(title="Mean"),
yaxis = list(title="Excess Kurtosis"),
zaxis = list(title="Skewness"))) %>% add_markers()
p
pulsar = read.csv(file="pulsar_stars.csv")
colnames(pulsar) = c("mip","sdip","ekip","sip","msnr","sdsnr","eksnr","ssnr","label")
p = plot_ly(pulsar, x = ~mip, y = ~ekip, z = ~sip, opacity = 0.5, colors = traffic,
marker = list(color = ~label, size = 3)) %>% layout(scene = list(xaxis = list(title="Mean"),
yaxis = list(title="Excess Kurtosis"),
zaxis = list(title="Skewness"))) %>% add_markers()
p
p = plot_ly(pulsar, x = ~mip, y = ~ekip, z = ~sip, opacity = 0.5, colors = traffic,
marker = list(color = ~label+1, size = 3)) %>% layout(scene = list(xaxis = list(title="Mean"),
yaxis = list(title="Excess Kurtosis"),
zaxis = list(title="Skewness"))) %>% add_markers()
p
