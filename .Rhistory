p = p + epsilon * loglik_grad(q)/2
# Make a full step for the position
q = q + epsilon * p
# Make a half step for momentum at the end.
p = p + epsilon * loglik_grad(q)/2
}
# Negate momentum at end of trajectory to make the proposal symmetric
p = -p
# Evaluate potential and kinetic energies at start and end of trajectory
current_E = loglik(current_q) - sum(current_p^2)/2
proposed_E = loglik(q) - sum(p^2)/2
# Accept or reject the state at end of trajectory, returning either
# the position at the end of the trajectory or the initial position
diff_K = proposed_E - current_E
alpha = exp(min(0,diff_K))
if (log(runif(1)) < diff_K) {
current_q = q # accept
}
lp_[it] = loglik(current_q,FALSE)
current_q[]
samps[it, ]  = current_q
if(it <= n_adapt){
H = (1-1/(it+t))*H+1/(it+t)*(delta-alpha)
log_ep[it] = mu-sqrt(it)/gamma*H
log_ep_[it] = it^(-kappa)*log_ep[it]+(1-it^(-kappa))*log_ep_[it-1]
}else{
log_ep[it] = log_ep_[n_adapt]
}
if(mod(it,plot_step)==0){
plot(X,y)
for(i in seq(0.1,0.9,0.1)){
q = X + sin(5*X) + 2*qsn(i,0,1,4)
lines(X,q,lty = 2,col = 2,lwd=2)
}
qt_lines(samps[it,])
}
if(mod(it,print_step)==0){
cat(it,"iterations completed.","\n")
}
}
return(list(samps = samps,step_size = log_ep,lp_ = lp_))
}
create_inits = function(){
W_1 = rnorm(J)
b_1 = rnorm(J)
W_2 = rnorm(J*K)
b_2 = rnorm(K)
W_3 = rnorm(K*L)
b_3 = rnorm(L)
b = rnorm(1)
z = rnorm(n)
inits = c(W_1,b_1,W_2,b_2,W_3,b_3,b,z)
inits = inits + runif(length(inits),-1,1)
return(inits)
}
########################################################
#Setting model stuff
L = 6; K = 15 ;J = 15; n = 100
########################################################
#Setting model stuff
L = 6; K = 15 ;J = 15; n = 200
########################################################
#Setting model stuff
L = 6; K = 10 ;J = 10; n = 200
X = sort(runif(n,-1,1))
y = X + sin(6*X) + 2*rsn(n,0,1,4)
qt_sigma = 0.1
plot(X,y)
for(i in seq(0.1,0.9,0.1)){
q = X + sin(6*X) + 2*qsn(i,0,1,4)
lines(X,q)
}
plot(X,y)
for(i in seq(0.1,0.9,0.1)){
q = X + sin(6*X) + 2*qsn(i,0,1,4)
lines(X,q)
}
mcmc_result = nn_hmc(n_iter = 5000,n_adapt = 1000, inits = create_inits(), n_step=10,delta=0.7)
nn_hmc = function(n_iter,n_adapt,inits,n_step,delta){
print_step = n_iter/10
plot_step = n_iter/1000
samps = matrix(0, nrow=n_iter,ncol=length(inits))
log_ep = numeric(n_iter)
lp_ = numeric(n_iter)
log_ep_ = numeric(n_adapt)
samps[1,] = inits
lp_[1] = loglik(inits)
log_ep[1] = log(find_start_ep(inits))
log_ep_[1] = log(0.01)
mu = log(10*exp(log_ep[1]))
H = 0
gamma = 0.05
t = 10
kappa = 0.75
for(it in 2: n_iter){
current_q = samps[it-1,]
epsilon = exp(log_ep[it-1])
q = current_q
p = rnorm(length(q), 0, 1) # independent standard normal variates
current_p = p
for (l in 1:n_step) {
# Make a half step for momentum at the beginning
p = p + epsilon * loglik_grad(q)/2
# Make a full step for the position
q = q + epsilon * p
# Make a half step for momentum at the end.
p = p + epsilon * loglik_grad(q)/2
}
# Negate momentum at end of trajectory to make the proposal symmetric
p = -p
# Evaluate potential and kinetic energies at start and end of trajectory
current_E = loglik(current_q) - sum(current_p^2)/2
proposed_E = loglik(q) - sum(p^2)/2
# Accept or reject the state at end of trajectory, returning either
# the position at the end of the trajectory or the initial position
diff_K = proposed_E - current_E
alpha = exp(min(0,diff_K))
if (log(runif(1)) < diff_K) {
current_q = q # accept
}
lp_[it] = loglik(current_q,FALSE)
current_q[]
samps[it, ]  = current_q
if(it <= n_adapt){
H = (1-1/(it+t))*H+1/(it+t)*(delta-alpha)
log_ep[it] = mu-sqrt(it)/gamma*H
log_ep_[it] = it^(-kappa)*log_ep[it]+(1-it^(-kappa))*log_ep_[it-1]
}else{
log_ep[it] = log_ep_[n_adapt]
}
if(mod(it,plot_step)==0){
plot(X,y)
for(i in seq(0.1,0.9,0.1)){
q = X + sin(5*X) + qsn(i,0,1,4)
lines(X,q,lty = 2,col = 2,lwd=2)
}
qt_lines(samps[it,])
}
if(mod(it,print_step)==0){
cat(it,"iterations completed.","\n")
}
}
return(list(samps = samps,step_size = log_ep,lp_ = lp_))
}
y = X + sin(6*X) + rsn(n,0,1,4)
plot(X,y)
y = X + sin(6*X) + 0.5*rsn(n,0,1,4)
plot(X,y)
nn_hmc = function(n_iter,n_adapt,inits,n_step,delta){
print_step = n_iter/10
plot_step = n_iter/1000
samps = matrix(0, nrow=n_iter,ncol=length(inits))
log_ep = numeric(n_iter)
lp_ = numeric(n_iter)
log_ep_ = numeric(n_adapt)
samps[1,] = inits
lp_[1] = loglik(inits)
log_ep[1] = log(find_start_ep(inits))
log_ep_[1] = log(0.01)
mu = log(10*exp(log_ep[1]))
H = 0
gamma = 0.05
t = 10
kappa = 0.75
for(it in 2: n_iter){
current_q = samps[it-1,]
epsilon = exp(log_ep[it-1])
q = current_q
p = rnorm(length(q), 0, 1) # independent standard normal variates
current_p = p
for (l in 1:n_step) {
# Make a half step for momentum at the beginning
p = p + epsilon * loglik_grad(q)/2
# Make a full step for the position
q = q + epsilon * p
# Make a half step for momentum at the end.
p = p + epsilon * loglik_grad(q)/2
}
# Negate momentum at end of trajectory to make the proposal symmetric
p = -p
# Evaluate potential and kinetic energies at start and end of trajectory
current_E = loglik(current_q) - sum(current_p^2)/2
proposed_E = loglik(q) - sum(p^2)/2
# Accept or reject the state at end of trajectory, returning either
# the position at the end of the trajectory or the initial position
diff_K = proposed_E - current_E
alpha = exp(min(0,diff_K))
if (log(runif(1)) < diff_K) {
current_q = q # accept
}
lp_[it] = loglik(current_q,FALSE)
current_q[]
samps[it, ]  = current_q
if(it <= n_adapt){
H = (1-1/(it+t))*H+1/(it+t)*(delta-alpha)
log_ep[it] = mu-sqrt(it)/gamma*H
log_ep_[it] = it^(-kappa)*log_ep[it]+(1-it^(-kappa))*log_ep_[it-1]
}else{
log_ep[it] = log_ep_[n_adapt]
}
if(mod(it,plot_step)==0){
plot(X,y)
for(i in seq(0.1,0.9,0.1)){
q = X + sin(5*X) + 0.5*qsn(i,0,1,4)
lines(X,q,lty = 2,col = 2,lwd=2)
}
qt_lines(samps[it,])
}
if(mod(it,print_step)==0){
cat(it,"iterations completed.","\n")
}
}
return(list(samps = samps,step_size = log_ep,lp_ = lp_))
}
########################################################
#Setting model stuff
L = 6; K = 10 ;J = 10; n = 200
X = sort(runif(n,-1,1))
y = X + sin(6*X) + 0.5*rsn(n,0,1,4)
qt_sigma = 0.1
plot(X,y)
for(i in seq(0.1,0.9,0.1)){
q = X + sin(6*X) + 0.5*qsn(i,0,1,4)
lines(X,q)
}
qt_sigma = 0.05
mcmc_result = nn_hmc(n_iter = 5000,n_adapt = 1000, inits = create_inits(), n_step=10,delta=0.7)
nn_hmc = function(n_iter,n_adapt,inits,n_step,delta){
print_step = n_iter/10
plot_step = n_iter/1000
samps = matrix(0, nrow=n_iter,ncol=length(inits))
log_ep = numeric(n_iter)
lp_ = numeric(n_iter)
log_ep_ = numeric(n_adapt)
samps[1,] = inits
lp_[1] = loglik(inits)
log_ep[1] = log(find_start_ep(inits))
log_ep_[1] = log(0.01)
mu = log(10*exp(log_ep[1]))
H = 0
gamma = 0.05
t = 10
kappa = 0.75
for(it in 2: n_iter){
current_q = samps[it-1,]
epsilon = exp(log_ep[it-1])
q = current_q
p = rnorm(length(q), 0, 1) # independent standard normal variates
current_p = p
for (l in 1:n_step) {
# Make a half step for momentum at the beginning
p = p + epsilon * loglik_grad(q)/2
# Make a full step for the position
q = q + epsilon * p
# Make a half step for momentum at the end.
p = p + epsilon * loglik_grad(q)/2
}
# Negate momentum at end of trajectory to make the proposal symmetric
p = -p
# Evaluate potential and kinetic energies at start and end of trajectory
current_E = loglik(current_q) - sum(current_p^2)/2
proposed_E = loglik(q) - sum(p^2)/2
# Accept or reject the state at end of trajectory, returning either
# the position at the end of the trajectory or the initial position
diff_K = proposed_E - current_E
alpha = exp(min(0,diff_K))
if (log(runif(1)) < diff_K) {
current_q = q # accept
}
lp_[it] = loglik(current_q,FALSE)
current_q[]
samps[it, ]  = current_q
if(it <= n_adapt){
H = (1-1/(it+t))*H+1/(it+t)*(delta-alpha)
log_ep[it] = mu-sqrt(it)/gamma*H
log_ep_[it] = it^(-kappa)*log_ep[it]+(1-it^(-kappa))*log_ep_[it-1]
}else{
log_ep[it] = log_ep_[n_adapt]
}
if(mod(it,plot_step)==0){
plot(X,y)
for(i in seq(0.1,0.9,0.1)){
q = X + sin(6*X) + 0.5*qsn(i,0,1,4)
lines(X,q,lty = 2,col = 2,lwd=2)
}
qt_lines(samps[it,])
}
if(mod(it,print_step)==0){
cat(it,"iterations completed.","\n")
}
}
return(list(samps = samps,step_size = log_ep,lp_ = lp_))
}
########################################################
#Setting model stuff
L = 6; K = 10 ;J = 10; n = 200
mcmc_result = nn_hmc(n_iter = 5000,n_adapt = 1000, inits = create_inits(), n_step=10,delta=0.7)
library(rmutil)
ifelse(c(1,2,3,4,5)>2,-1,1)
###ALD Likelihood####
loglik = function(param,posterior = TRUE){
W_1 = param[1:J]
b_1 = param[(J+1):(2*J)]
W_2 = matrix(param[(2*J+1):(2*J+J*K)],nrow=J)
b_2 = param[(2*J+J*K+1):(2*J+J*K+K)]
W_3 = matrix(param[(2*J+J*K+K+1):(2*J+J*K+K+K*L)],nrow=K)
b_3 = param[(2*J+J*K+K+K*L+1):(2*J+J*K+K+K*L+L)]
b = param[2*J+J*K+K+K*L+L+1]
z = param[(2*J+J*K+K+K*L+L+1+1):(2*J+J*K+K+K*L+L+1+n)]
z = pmin(qnorm(0.999),pmax(qnorm(0.001),z))
tau = pnorm(z)
nn = neural_net(X,tau,W_1,b_1,W_2,b_2,W_3,b_3,b)
if(posterior){
loglik = sum(dasym_laplace(y-nn,0,qt_sigma,tau,log=T))+sum(dlaplace(W_1,log=T))+
sum(dnorm(b_1,log=T))+sum(dlaplace(W_2,log=T))+sum(dnorm(b_2,log=T))+sum(dlaplace(W_3,log=T))+
sum(dnorm(b_3,log=T))+dnorm(b,log=T)+sum(dnorm(z,log=T))
}else{
loglik = sum(dasym_laplace(y-nn,0,qt_sigma,tau,log=T))
}
return(loglik)
}
loglik_grad = function(param){
W_1 = param[1:J]
b_1 = param[(J+1):(2*J)]
W_2 = matrix(param[(2*J+1):(2*J+J*K)],nrow=J,ncol=K)
b_2 = param[(2*J+J*K+1):(2*J+J*K+K)]
W_3 = matrix(param[(2*J+J*K+K+1):(2*J+J*K+K+K*L)],nrow=K)
b_3 = param[(2*J+J*K+K+K*L+1):(2*J+J*K+K+K*L+L)]
b = param[2*J+J*K+K+K*L+L+1]
z = param[(2*J+J*K+K+K*L+L+1+1):(2*J+J*K+K+K*L+L+1+n)]
z = pmin(qnorm(0.999),pmax(qnorm(0.001),z))
tau = pnorm(z)
hidden_one = forward(X,W_1,b_1)
hidden_two = forward(xi_1(hidden_one),W_2,b_2)
hidden_three = forward(xi_2(hidden_two),W_3,b_3)
sp = predict(isp,newx = tau)-0.5
sp_grad = predict(isp_grad,newx = tau)
nn = rowSums(xi_3(hidden_three)*sp)+b
diff = y-nn
grad_W_1 = 1/qt_sigma*sapply(seq_len(J),function(j){
sum((tau-(diff<0))*X*rowSums((xi_1(hidden_one[,j],T)%o%W_2[j,]*xi_2(hidden_two,T))%*%W_3*sp*xi_3(hidden_three,T)))
})-ifelse(W_1>0,1,-1)
grad_b_1 = 1/qt_sigma*sapply(seq_len(J),function(j){
sum((tau-(diff<0))*rowSums((xi_1(hidden_one[,j],T)%o%W_2[j,]*xi_2(hidden_two,T))%*%W_3*sp*xi_3(hidden_three,T)))
})-b_1
grad_W_2 = c(1/qt_sigma*Reduce('+',lapply(seq_len(n),function(i){
(tau[i]-(diff[i]<0))*xi_1(hidden_one[i,])%o%c((W_3*xi_2(hidden_two[i,],T))%*%(sp[i,]*xi_3(hidden_three[i,],T)))
}))-ifelse(W_2>0,1,-1))
grad_b_2 = 1/qt_sigma*sapply(seq_len(K),function(k){
sum((tau-(diff<0))*rowSums(xi_2(hidden_two[,k],T)%o%W_3[k,]*sp*xi_3(hidden_three,T)))
})-b_2
grad_W_3 = c(1/qt_sigma*Reduce('+',lapply(seq_len(n),function(i){
(tau[i]-(diff[i]<0))*xi_2(hidden_two[i,])%o%(sp[i,]*xi_3(hidden_three[i,],T))
}))-ifelse(W_3>0,1,-1))
grad_b_3 = as.numeric(1/qt_sigma*colSums((tau-(diff<0))*sp*xi_3(hidden_three,T))-b_3)
grad_b = 1/qt_sigma*sum(tau-(diff<0))-b
grad_z = dnorm(z)*(1/tau-1/(1-tau))+1/qt_sigma*((tau-(diff<0))*dnorm(z)*rowSums(xi_3(hidden_three)*sp_grad)-diff*dnorm(z))-z
grad_param = c(grad_W_1,grad_b_1,grad_W_2,grad_b_2,grad_W_3,grad_b_3,grad_b,grad_z)
return(grad_param)
}
find_good_ep = function(param){
q = param
epsilon_rest = 0.1
epsilon_tau = 0.005
epsilon = c(rep(epsilon_rest,length(q)-n),rep(epsilon_tau,n))
p = rnorm(length(q), 0, 1)
current_E = loglik(q)-sum(p^2)/2
p = p + epsilon * loglik_grad(q) / 2
q = q + epsilon * p
p = p + epsilon * loglik_grad(q) / 2
proposed_E = loglik(q)-sum(p^2)/2
diff_E = proposed_E - current_E
a = 2*(diff_E > log(0.5)) - 1
while(a*diff_E > -a*log(2)){
epsilon_rest = 2^a*epsilon_rest
epsilon = c(rep(epsilon_rest,length(q)-n),rep(epsilon_tau,n))
current_E = loglik(q)-sum(p^2)/2
p = p + epsilon * loglik_grad(q) / 2
q = q + epsilon * p
p = p + epsilon * loglik_grad(q) / 2
proposed_E = loglik(q)-sum(p^2)/2
diff_E = proposed_E - current_E
}
return(epsilon_rest)
}
find_start_ep = function(param){
q = param
epsilon = epsilon_ = 0.01
a_min = 0.25
a_cross = 0.5
a_max = 0.75
d = 2
p = rnorm(length(q), 0, 1)
current_E = loglik(q)-sum(p^2)/2
p = p + epsilon * loglik_grad(q) / 2
q = q + epsilon * p
p = p + epsilon * loglik_grad(q) / 2
proposed_E = loglik(q)-sum(p^2)/2
diff_E = proposed_E - current_E
direction = 2*(diff_E > log(a_cross)) - 1
while(direction*diff_E > direction*log(a_cross)){
epsilon = epsilon_
epsilon_ = d^direction*epsilon
current_E = loglik(q)-sum(p^2)/2
p = p + epsilon_ * loglik_grad(q) / 2
q = q + epsilon_ * p
p = p + epsilon_ * loglik_grad(q) / 2
proposed_E = loglik(q)-sum(p^2)/2
diff_E = proposed_E - current_E
}
ep = sort(c(epsilon,epsilon_))
epsilon = ep[1]
epsilon_ = ep[2]
while((diff_E > log(a_max)) || (diff_E < log(a_min))){
epsilon_m = (epsilon+epsilon_)/2
current_E = loglik(q)-sum(p^2)/2
p = p + epsilon_m * loglik_grad(q) / 2
q = q + epsilon_m * p
p = p + epsilon_m * loglik_grad(q) / 2
proposed_E = loglik(q)-sum(p^2)/2
diff_E = proposed_E - current_E
if(diff_E > log(a_max)){
epsilon = epsilon_m
}else if(diff_E < log(a_min)){
epsilon_ = epsilon_m
}else{
epsilon = epsilon_m
break
}
}
return(epsilon)
}
nn_hmc = function(n_iter,n_adapt,inits,n_step,delta){
print_step = n_iter/10
plot_step = n_iter/1000
samps = matrix(0, nrow=n_iter,ncol=length(inits))
log_ep = numeric(n_iter)
lp_ = numeric(n_iter)
log_ep_ = numeric(n_adapt)
samps[1,] = inits
lp_[1] = loglik(inits)
log_ep[1] = log(find_start_ep(inits))
log_ep_[1] = log(0.01)
mu = log(10*exp(log_ep[1]))
H = 0
gamma = 0.05
t = 10
kappa = 0.75
for(it in 2: n_iter){
current_q = samps[it-1,]
epsilon = exp(log_ep[it-1])
q = current_q
p = rnorm(length(q), 0, 1) # independent standard normal variates
current_p = p
for (l in 1:n_step) {
# Make a half step for momentum at the beginning
p = p + epsilon * loglik_grad(q)/2
# Make a full step for the position
q = q + epsilon * p
# Make a half step for momentum at the end.
p = p + epsilon * loglik_grad(q)/2
}
# Negate momentum at end of trajectory to make the proposal symmetric
p = -p
# Evaluate potential and kinetic energies at start and end of trajectory
current_E = loglik(current_q) - sum(current_p^2)/2
proposed_E = loglik(q) - sum(p^2)/2
# Accept or reject the state at end of trajectory, returning either
# the position at the end of the trajectory or the initial position
diff_K = proposed_E - current_E
alpha = exp(min(0,diff_K))
if (log(runif(1)) < diff_K) {
current_q = q # accept
}
lp_[it] = loglik(current_q,FALSE)
current_q[]
samps[it, ]  = current_q
if(it <= n_adapt){
H = (1-1/(it+t))*H+1/(it+t)*(delta-alpha)
log_ep[it] = mu-sqrt(it)/gamma*H
log_ep_[it] = it^(-kappa)*log_ep[it]+(1-it^(-kappa))*log_ep_[it-1]
}else{
log_ep[it] = log_ep_[n_adapt]
}
if(mod(it,plot_step)==0){
plot(X,y)
for(i in seq(0.1,0.9,0.1)){
q = X + sin(6*X) + 0.5*qsn(i,0,1,4)
lines(X,q,lty = 2,col = 2,lwd=2)
}
qt_lines(samps[it,])
}
if(mod(it,print_step)==0){
cat(it,"iterations completed.","\n")
}
}
return(list(samps = samps,step_size = log_ep,lp_ = lp_))
}
create_inits = function(){
W_1 = rnorm(J)
b_1 = rnorm(J)
W_2 = rnorm(J*K)
b_2 = rnorm(K)
W_3 = rnorm(K*L)
b_3 = rnorm(L)
b = rnorm(1)
z = rnorm(n)
inits = c(W_1,b_1,W_2,b_2,W_3,b_3,b,z)
inits = inits + runif(length(inits),-1,1)
return(inits)
}
mcmc_result = nn_hmc(n_iter = 5000,n_adapt = 1000, inits = create_inits(), n_step=10,delta=0.7)
