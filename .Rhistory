boundary = function(x){
dnorm(x)/(0.65*dnorm(x,1,1)+0.35*dnorm(x,-1,2))-2/3
}
plot(seq(-10,10,0.5),boundary(seq(-10,10,0.5)))
plot(seq(-10,10,0.5),boundary(seq(-10,10,0.5)),xlab="",ylab="")
plot(seq(-10,10,0.5),boundary(seq(-10,10,0.5)),xlab="",ylab="",type="l")
plot(seq(-10,10,0.1),boundary(seq(-10,10,0.5)),xlab="",ylab="",type="l")
plot(seq(-10,10,0.1),boundary(seq(-10,10,0.1)),xlab="",ylab="",type="l")
abline(v=0,col=2,lty=2)
plot(seq(-10,10,0.1),boundary(seq(-10,10,0.1)),xlab="",ylab="",type="l")
abline(h=0,col=2,lty=2)
b_point1  = uniroot(boundary,c(-5,0))$root
b_point2  = uniroot(boundary,c(0,5))$root
abline(v=b_point1,col=3,lty=3)
abline(v=b_point2,col=3,lty=3)
elibrary(mvtnorm)
set.seed(2000)
mu_g = c(2,1)
mu_r = c(1,2)
generate_dots = function(n_samp){
d = cbind(rmvnorm(n_samp,c(2,1)),rep(0,n_samp))
d = rbind(d,cbind(rmvnorm(n_samp,c(1,2)),rep(1,n_samp)))
colnames(d) = c("x1","x2","y")
return(data.frame(d))
}
n_train = 100
dtrain = generate_dots(n_train)
plot(NULL,NULL,xlim=c(-3,5),ylim=c(-2,5),xlab="",ylab="")
points(subset(dtrain,y==0)[,-3],col="green")
points(subset(dtrain,y==1)[,-3],col="red")
set.seed(2014)
n_test = 500
dtest = generate_dots(n_test)
library(mvtnorm)
set.seed(2000)
mu_g = c(2,1)
mu_r = c(1,2)
generate_dots = function(n_samp){
d = cbind(rmvnorm(n_samp,c(2,1)),rep(0,n_samp))
d = rbind(d,cbind(rmvnorm(n_samp,c(1,2)),rep(1,n_samp)))
colnames(d) = c("x1","x2","y")
return(data.frame(d))
}
n_train = 100
dtrain = generate_dots(n_train)
plot(NULL,NULL,xlim=c(-3,5),ylim=c(-2,5),xlab="",ylab="")
points(subset(dtrain,y==0)[,-3],col="green")
points(subset(dtrain,y==1)[,-3],col="red")
set.seed(2014)
n_test = 500
dtest = generate_dots(n_test)
b_intercept_bayes = (sum(mu_r^2)-sum(mu_g^2))/(2*mu_r[2]-mu_g[2])
b_slope_bayes = -(mu_r[1]-mu_g[1])/(mu_r[2]-mu_g[2])
abline(coef=c(b_intercept_bayes,b_slope_bayes),col="blue",lty=2)
lm(y~x1+x2,data=dtrain)
lin_class = lm(y~x1+x2,data=dtrain)
coef = lin_class$coefficients
lin_class = lm(y~x1+x2,data=dtrain)
coef = lin_class$coefficients
b_intercept_lin = (0.5-coef[1])/coef[3]
b_slope_lin = coef[2]/coef[3]
abline(coef=c(b_intercept_lin,b_slope_lin))
lin_class = lm(y~x1+x2,data=dtrain)
coef = lin_class$coefficients
b_intercept_lin = (0.5-coef[1])/coef[3]
b_slope_lin = -coef[2]/coef[3]
abline(coef=c(b_intercept_lin,b_slope_lin))
plot(NULL,NULL,xlim=c(-3,5),ylim=c(-2,5),xlab="",ylab="")
points(subset(dtrain,y==0)[,-3],col="green")
points(subset(dtrain,y==1)[,-3],col="red")
abline(coef=c(b_intercept_bayes,b_slope_bayes),col="blue",lty=2)
abline(coef=c(b_intercept_lin,b_slope_lin))
legend("topleft",legend = c("Linear","Bayes"),col = c("black","blue"),lty=1:2)
b_intercept_bayes = (sum(mu_r^2)-sum(mu_g^2))/(2*mu_r[2]-mu_g[2])
b_slope_bayes = -(mu_r[1]-mu_g[1])/(mu_r[2]-mu_g[2])
b_pred = ifelse(dtest$x2-dtest$x1*b_slope_bayes-b_intercept_bayes>0,1,0)
table(b_pred,dtest$y)
table(dtest$y,b_pred)
result = table(dtest$y,b_pred)
result
b_fp = result[1,2]/sum(result[1,])
b_fn = result[2,2]/sum(result[2,])
b_mc = (result[1,2]+result[2,1])/sum(result)
b_fp = result[1,2]/sum(result[1,])
b_fn = result[2,1]/sum(result[2,])
lin_class = lm(y~x1+x2,data=dtrain)
coef = lin_class$coefficients
b_intercept_lin = (0.5-coef[1])/coef[3]
b_slope_lin = -coef[2]/coef[3]
abline(coef=c(b_intercept_lin,b_slope_lin))
lin_pred = ifelse(predict(lin_class,newdata=dtest)>0.5,1,0)
result = table(dtest$y,lin_pred)
result
lin_fp = result[1,2]/sum(result[1,])
lin_fn = result[2,1]/sum(result[2,])
lin_mc = (result[1,2]+result[2,1])/sum(result)
lin_pred_train = ifelse(predict(lin_class,newdata=dtrain)>0.5,1,0)
result_train = table(dtrain$y,lin_pred_train)
result_train
lin_fp_train = result_train[1,2]/sum(result_train[1,])
lin_fn_train = result_train[2,1]/sum(result_train[2,])
lin_mc_train = (result_train[1,2]+result_train[2,1])/sum(result_train)
b_intercept_bayes = (sum(mu_r^2)-sum(mu_g^2))/(2*mu_r[2]-mu_g[2])
b_slope_bayes = -(mu_r[1]-mu_g[1])/(mu_r[2]-mu_g[2])
b_pred_train = ifelse(dtrain$x2-dtrain$x1*b_slope_bayes-b_intercept_bayes>0,1,0)
result_train = table(dtrain$y,b_pred_train)
result_train
b_fp_train = result_train[1,2]/sum(result_train[1,])
b_fn_train = result_train[2,1]/sum(result_train[2,])
b_mc_train = (result_train[1,2]+result_train[2,1])/sum(result_train)
b_intercept_bayes = (sum(mu_r^2)-sum(mu_g^2))/(2*mu_r[2]-mu_g[2])
b_slope_bayes = -(mu_r[1]-mu_g[1])/(mu_r[2]-mu_g[2])
b_pred_train = ifelse(dtrain$x2-dtrain$x1*b_slope_bayes-b_intercept_bayes>0,1,0)
result_train = table(dtrain$y,b_pred_train)
result_train
b_fp_train = result_train[1,2]/sum(result_train[1,])
b_fn_train = result_train[2,1]/sum(result_train[2,])
b_mc_train = (result_train[1,2]+result_train[2,1])/sum(result_train)
b_pred_test = ifelse(dtest$x2-dtest$x1*b_slope_bayes-b_intercept_bayes>0,1,0)
result_test = table(dtest$y,b_pred_test)
result_test
b_fp_test = result_test[1,2]/sum(result_test[1,])
b_fn_test = result_test[2,1]/sum(result_test[2,])
b_mc_test = (result_test[1,2]+result_test[2,1])/sum(result_test)
abline(coef=c(b_intercept_bayes,b_slope_bayes),col="blue",lty=2)
lin_class = lm(y~x1+x2,data=dtrain)
coef = lin_class$coefficients
b_intercept_lin = (0.5-coef[1])/coef[3]
b_slope_lin = -coef[2]/coef[3]
abline(coef=c(b_intercept_lin,b_slope_lin))
lin_pred_train = ifelse(predict(lin_class,newdata=dtrain)>0.5,1,0)
result_train = table(dtrain$y,lin_pred_train)
result_train
lin_fp_train = result_train[1,2]/sum(result_train[1,])
lin_fn_train = result_train[2,1]/sum(result_train[2,])
lin_mc_train = (result_train[1,2]+result_train[2,1])/sum(result_train)
lin_pred_test = ifelse(predict(lin_class,newdata=dtest)>0.5,1,0)
result_test = table(dtest$y,lin_pred_test)
result_test
lin_fp_test = result_test[1,2]/sum(result_test[1,])
lin_fn_test = result_test[2,1]/sum(result_test[2,])
lin_mc_test = (result_test[1,2]+result_test[2,1])/sum(result_test)
legend("topleft",legend = c("Linear","Bayes"),col = c("black","blue"),lty=1:2)
boundary = function(x){
dnorm(x)/(0.65*dnorm(x,1,1)+0.35*dnorm(x,-1,2))-2/3
}
plot(seq(-10,10,0.1),boundary(seq(-10,10,0.1)),xlab="",ylab="",type="l")
abline(h=0,col=2,lty=2)
#By obersving the plot first root lies within (-5,0) and second (0,5)
b_point1  = uniroot(boundary,c(-5,0))$root
b_point2  = uniroot(boundary,c(0,5))$root
abline(v=b_point1,col=3,lty=3)
abline(v=b_point2,col=3,lty=3)
result_train
